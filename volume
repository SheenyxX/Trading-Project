import ccxt
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns  # Import Seaborn to register its styles

# Constants
LOOKBACK_DAYS = 180  # For threshold calculation
THRESHOLDS = [10, 30, 70, 90]  # Percentiles for volume classification
TIMEZONE = 'America/Bogota'
RESAMPLE_OFFSET = '7h'
MACD_PARAMS = (12, 26, 9)  # Fast, Slow, Signal periods

def fetch_data(symbol, timeframe='1d', since=None, limit=1000):
    exchange = ccxt.binance()
    try:
        data = exchange.fetch_ohlcv(symbol, timeframe, since, limit)
    except (ccxt.NetworkError, ccxt.ExchangeError) as e:
        print(f"Error fetching data: {e}")
        return None

    df = pd.DataFrame(data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    
    # Convert and adjust timestamps
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms', utc=True).dt.tz_convert(TIMEZONE)
    df.set_index('timestamp', inplace=True)
    
    # Resample with forward-fill to handle gaps
    df = df.resample('1D', closed='right', label='right', offset=RESAMPLE_OFFSET).agg({
        'open': 'first',
        'high': 'max',
        'low': 'min',
        'close': 'last',
        'volume': 'sum'
    }).ffill()
    
    # Calculate technical indicators
    df['volume_usd'] = df['volume'] * df['close']
    ema_fast = df['close'].ewm(span=MACD_PARAMS[0], adjust=False).mean()
    ema_slow = df['close'].ewm(span=MACD_PARAMS[1], adjust=False).mean()
    df['macd'] = ema_fast - ema_slow
    df['signal'] = df['macd'].ewm(span=MACD_PARAMS[2], adjust=False).mean()
    df['histogram'] = df['macd'] - df['signal']
    
    return df

def classify_volume_dynamic(volume, thresholds):
    """Classifies volume based on dynamic thresholds."""
    volume = float(volume)
    if volume <= thresholds[0]:
        return "Very Low", 'blue', 'Very Low interest'
    elif thresholds[0] < volume <= thresholds[1]:
        return "Low", 'yellow', 'Low interest'
    elif thresholds[1] < volume <= thresholds[2]:
        return "Moderate", 'orange', 'Moderate interest'
    elif thresholds[2] < volume <= thresholds[3]:
        return "High", 'green', 'High interest'
    else:
        return "Very High", 'red', 'Very High interest'

def plot_price(df, period, ax):
    recent_data = df.tail(period)
    ax.plot(recent_data.index, recent_data['close'], label=f'Close Price (Last {period} Days)')
    ax.set_xlabel('')
    ax.set_ylabel('Price (USDT)')
    ax.set_title(f'BTC/USDT Price (Last {period} Days)')
    ax.grid(True)
    ax.xaxis.set_major_locator(mdates.DayLocator(interval=5))
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%m-%d'))
    ax.tick_params(axis='x', rotation=45)

def plot_macd(df, period, ax):
    recent_data = df.tail(period)
    
    # Plot MACD components
    ax.plot(recent_data.index, recent_data['macd'], label='MACD', color='blue')
    ax.plot(recent_data.index, recent_data['signal'], label='Signal Line', color='orange')
    
    # Plot histogram with color coding
    colors = np.where(recent_data['histogram'] >= 0, 'green', 'red')
    ax.bar(recent_data.index, recent_data['histogram'], color=colors, alpha=0.5, label='Histogram')
    
    # Add dynamic title and labels
    last_macd = recent_data['macd'].iloc[-1]
    last_signal = recent_data['signal'].iloc[-1]
    ax.set_title(f'MACD (Last {period} Days)\nMACD: {last_macd:.2f}, Signal: {last_signal:.2f}')
    ax.set_xlabel('')
    ax.legend()
    ax.grid(True)
    ax.xaxis.set_major_locator(mdates.DayLocator(interval=5))
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%m-%d'))
    ax.tick_params(axis='x', rotation=45)

def plot_volume_bar(df, period, ax, thresholds):
    recent_data = df.tail(period).copy()
    
    # Apply classification
    recent_data[['volume_level', 'color', 'sentiment']] = recent_data['volume_usd'].apply(
        lambda v: classify_volume_dynamic(v, thresholds)
    ).apply(pd.Series)

    # Plotting
    for i, row in recent_data.iterrows():
        ax.bar(i, row['volume_usd'], color=row['color'], alpha=0.6)

    ax.axhline(recent_data['volume_usd'].mean(), color='blue', linestyle='--', 
               label=f'Avg Volume ({period} Days)')
    ax.set_xlabel('')
    ax.set_ylabel('Volume (USD)')
    ax.set_title(f'Volume for the Last {period} Days')
    ax.tick_params(axis='x', rotation=45)
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%m-%d'))
    ax.grid(True)

    # Calculate volume level percentages
    volume_level_counts = recent_data['volume_level'].value_counts(normalize=True) * 100
    return format_volume(recent_data['volume_usd'].mean()), recent_data['volume_usd'].iloc[-1], recent_data['volume_usd'].iloc[-2], recent_data.index[-1].strftime('%Y-%m-%d'), volume_level_counts

def format_volume(volume):
    volume = float(volume)
    if volume >= 1_000_000_000:
        return f'{volume / 1_000_000_000:.2f}B'
    elif volume >= 1_000_000:
        return f'{volume / 1_000_000:.2f}M'
    elif volume >= 1_000:
        return f'{volume / 1_000:.2f}K'
    else:
        return f'{volume:.2f}'

def create_color_table(ax, thresholds):
    color_labels = [
        ['Very Low (Blue)', f'Volume ≤ ${thresholds[0]:.2f}'],
        ['Low (Yellow)', f'${thresholds[0]:.2f} < Volume ≤ ${thresholds[1]:.2f}'],
        ['Moderate (Orange)', f'${thresholds[1]:.2f} < Volume ≤ ${thresholds[2]:.2f}'],
        ['High (Green)', f'${thresholds[2]:.2f} < Volume ≤ ${thresholds[3]:.2f}'],
        ['Very High (Red)', f'Volume > ${thresholds[3]:.2f}']
    ]
    
    ax.axis('off')
    table = ax.table(cellText=color_labels, colLabels=['Volume Level', 'Volume Range'], 
                    loc='center', cellLoc='center', colColours=['#f0f0f0']*2)
    table.auto_set_font_size(False)
    table.set_fontsize(10)
    table.auto_set_column_width([0, 1])

def plot_volume_donut_chart(volume_counts, ax, title, category_colors):
    labels = [f'{label} ({size:.2f}%)' for label, size in zip(volume_counts.index, volume_counts.values)]
    sizes = volume_counts.values
    colors = [category_colors[category] for category in volume_counts.index]

    ax.pie(sizes, labels=labels, colors=colors, startangle=90, counterclock=False,
           wedgeprops=dict(width=0.3, edgecolor='w'))
    ax.set_title(title)
    ax.axis('equal')
    plt.Circle((0,0), 0.70, fc='white')  # Donut hole

def data_quality_report(df):
    """Generates a data quality report with key metrics."""
    report = {
        "missing_values": df.isnull().sum().sum(),
        "duplicate_rows": df.duplicated().sum(),
        "zero_volume_days": (df['volume'] == 0).sum(),
        "price_anomalies": df[(df['high'] < df['low']) | (df['close'] > df['high'])].shape[0]
    }
    return pd.DataFrame.from_dict(report, orient='index', columns=['Value'])

def analyze_macd(df):
    recent = df.tail(3)
    current = recent.iloc[-1]
    prev = recent.iloc[-2]
    
    analysis = []
    
    # Crossover detection
    if (prev['macd'] < prev['signal']) and (current['macd'] > current['signal']):
        analysis.append("Bullish crossover detected (MACD crossed above Signal)")
    elif (prev['macd'] > prev['signal']) and (current['macd'] < current['signal']):
        analysis.append("Bearish crossover detected (MACD crossed below Signal)")
    
    # Zero line crossover
    if (prev['macd'] < 0) and (current['macd'] > 0):
        analysis.append("Bullish zero-line crossover")
    elif (prev['macd'] > 0) and (current['macd'] < 0):
        analysis.append("Bearish zero-line crossover")
    
    # Divergence detection (basic)
    if (current['close'] > prev['close']) and (current['macd'] < prev['macd']):
        analysis.append("Potential bearish divergence (Price ↗ vs MACD ↘)")
    elif (current['close'] < prev['close']) and (current['macd'] > prev['macd']):
        analysis.append("Potential bullish divergence (Price ↘ vs MACD ↗)")
    
    return analysis

# Main Execution
def main():
    symbol = 'BTC/USDT'
    timeframe = '1d'
    data = fetch_data(symbol, timeframe)

    if data is not None:
        # Set the style (fixed to use a valid style)
        plt.style.use('seaborn-v0_8')  # Updated to a valid style

        # Generate and display data quality report
        quality_report = data_quality_report(data)
        print("\nData Quality Report:")
        print(quality_report)
        
        # MACD Analysis
        macd_analysis = analyze_macd(data)
        print("\nMACD Analysis:")
        for insight in macd_analysis:
            print(f"- {insight}")
        
        # Calculate thresholds using single lookback period
        combined_data = data.tail(LOOKBACK_DAYS)['volume_usd']
        combined_thresholds = np.percentile(combined_data, THRESHOLDS)

        # Create main figure with expanded layout
        fig, axes = plt.subplots(nrows=3, ncols=2, figsize=(15, 18))
        
        # Plot prices
        plot_price(data, 90, axes[0, 0])
        plot_price(data, 30, axes[0, 1])

        # Plot MACD
        plot_macd(data, 90, axes[1, 0])
        plot_macd(data, 30, axes[1, 1])

        # Plot volumes
        avg_vol_30, last_vol_30, yesterday_vol_30, last_date_30, vol_counts_30 = plot_volume_bar(data, 30, axes[2, 1], combined_thresholds)
        avg_vol_90, last_vol_90, yesterday_vol_90, last_date_90, vol_counts_90 = plot_volume_bar(data, 90, axes[2, 0], combined_thresholds)

        # Create metrics table with MACD data
        macd_today = data['macd'].iloc[-1]
        signal_today = data['signal'].iloc[-1]
        macd_cross = "Bullish" if macd_today > signal_today else "Bearish"

        fig_table = plt.figure(figsize=(12, 3))
        table_data = [
            ['Metric', 'Value', 'Sentiment'],
            ['Date', f'{last_date_30}', ''],
            ['30 Days Avg Volume', avg_vol_30, ''],
            ['90 Days Avg Volume', avg_vol_90, ''],
            ['Today\'s Volume', format_volume(last_vol_30), classify_volume_dynamic(last_vol_30, combined_thresholds)[2]],
            ['Yesterday\'s Volume', format_volume(yesterday_vol_30), classify_volume_dynamic(yesterday_vol_30, combined_thresholds)[2]],
            ['MACD Value', f'{macd_today:.2f}', ''],
            ['Signal Value', f'{signal_today:.2f}', ''],
            ['MACD Cross', macd_cross, 'Buy Signal' if macd_cross == "Bullish" else 'Sell Signal']
        ]
        ax_table = fig_table.add_subplot(111)
        ax_table.axis('off')
        ax_table.table(cellText=table_data, loc='center', cellLoc='center')

        # Color table with dynamic thresholds
        fig_color = plt.figure(figsize=(8, 2))
        ax_color = fig_color.add_subplot(111)
        create_color_table(ax_color, combined_thresholds)

        # Donut charts with actual data
        category_colors = {
            "Very Low": "blue",
            "Low": "yellow",
            "Moderate": "orange",
            "High": "green",
            "Very High": "red"
        }
        
        fig_donut, (ax_donut1, ax_donut2) = plt.subplots(1, 2, figsize=(12, 5))
        plot_volume_donut_chart(vol_counts_90, ax_donut1, 'Volume Distribution (90 Days)', category_colors)
        plot_volume_donut_chart(vol_counts_30, ax_donut2, 'Volume Distribution (30 Days)', category_colors)

        plt.tight_layout()
        plt.show()

if __name__ == "__main__":
    main()
